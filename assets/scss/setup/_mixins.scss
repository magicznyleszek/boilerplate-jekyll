// positioning shorthand
// @include absolute(top 10px right 30px);
// --------------------
@mixin position($position, $args) {
    // look for these offsets
    $offsets: top right bottom left;
    @each $offset in $offsets {
        // check if offset found in $args
        $i: index($args, $offset);
        // check if offset was found
        // check if offset is withing list range
        // check if offset value is valid
        @if $i
        and $i + 1 <= length($args)
        and type-of( nth($args, $i + 1) ) == number {
            // assign value to offset
            #{$offset}: nth($args, $i + 1);
        }
    }
    position: $position;
}

// private mixin for position absolute
// -----------------------------------
@mixin absolute($args) {
    @include position(absolute, $args);
}

// private mixin for position fixed
// --------------------------------
@mixin fixed($args) {
    @include position(fixed, $args);
}

// function to strip units from value
// ----------------------------------
@function parseInt($n) {
    @return $n / ($n * 0 + 1);
}

// returns property with rem value
// uses $font-size
// -------------------------------
@mixin rem($property, $values) {
    $px : (); 
    $rem: ();
    $root: parseInt($font-size);
    @each $value in $values {
        @if $value == 0 or $value == auto {
            $px : append($px , $value);
            $rem: append($rem, $value);
        }
        @else if type-of($value) == number {
            $unit: unit($value);
            $val: parseInt($value);
            @if $unit == "px" {
                $px : append($px,  $value);
                $rem: append($rem, ($val / $root + rem));
            }
            @if $unit == "rem" {
                $px : append($px,  ($val * $root + px));
                $rem: append($rem, $value);
            }
        }
        @else {
            $px : append($px,  $value);
            $rem: append($rem, $value);
        }
    }
    @if $px == $rem {
        #{$property}: $px;
    } @else {
        #{$property}: $px;
        #{$property}: $rem;
    } 
}

// function for converting to rem value
// uses $font-size
// ------------------------------------
@function rem($value) {
    $root: parseInt($font-size);
    $val: parseInt($value);
    $return: ();
    @if unit($value) == "px" {
        $return: append($return, ($val / $root + rem));
    } @else {
        $return: append($return, ($val * $root + px));
    }
    @return $return;
}